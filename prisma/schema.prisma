// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

enum UserRole {
  admin
  tenant
}

enum PropertyType {
  residential
  commercial
}

enum PropertyStatus {
  active
  inactive
}

enum RentStatus {
  paid
  overdue
  pending
}

enum MaintenanceStatus {
  open
  in_progress
  resolved
}

enum DocumentType {
  lease_agreement
  payment_receipt
  other
}

enum NotificationType {
  payment_due
  maintenance_update
  general
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @db.Timestamptz()
  image         String?
  role          UserRole  @default(admin)
  createdById   String?
  createdBy     User?     @relation("UserCreatedBy", fields: [createdById], references: [id])
  createdUsers  User[]    @relation("UserCreatedBy")

  accounts Account[]
  sessions Session[]

  // Property management relations
  properties          Property[]           @relation("PropertyOwner")
  rentPayments        RentPayment[]
  maintenanceRequests MaintenanceRequest[]
  documents           Document[]
  notifications       Notification[]
  units               Unit[]

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @map("refreshToken") @db.Text
  refresh_token_expires_in Int?    @map("refreshTokenExpiresIn")
  access_token             String? @map("accessToken") @db.Text
  expires_at               Int?    @map("expiresAt")
  token_type               String? @map("tokenType")
  scope                    String?
  id_token                 String? @map("idToken") @db.Text
  session_state            String? @map("sessionState")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime @db.Timestamptz()
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime @db.Timestamptz()

  @@unique([identifier, token])
}

model Property {
  id        String         @id @default(cuid())
  name      String
  address   String
  type      PropertyType
  ownerId   String
  status    PropertyStatus
  createdAt DateTime       @default(now()) @db.Timestamptz()
  updatedAt DateTime       @updatedAt @db.Timestamptz()

  owner User   @relation("PropertyOwner", fields: [ownerId], references: [id])
  units Unit[]
}

model Unit {
  id         String    @id @default(cuid())
  propertyId String
  unitNumber String
  tenantId   String?
  rentAmount Float
  isOccupied Boolean   @default(false)
  leaseStart DateTime? @db.Timestamptz()
  leaseEnd   DateTime? @db.Timestamptz()

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  property            Property             @relation(fields: [propertyId], references: [id])
  tenant              User?                @relation(fields: [tenantId], references: [id])
  rentPayments        RentPayment[]
  maintenanceRequests MaintenanceRequest[]
  documents           Document[]
}

model RentPayment {
  id          String     @id @default(cuid())
  unitId      String
  tenantId    String
  paymentDate DateTime   @default(now()) @db.Timestamptz()
  amountPaid  Float
  status      RentStatus
  dueDate     DateTime?  @db.Timestamptz()

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  unit   Unit @relation(fields: [unitId], references: [id])
  tenant User @relation(fields: [tenantId], references: [id])
}

model MaintenanceRequest {
  id          String            @id @default(cuid())
  unitId      String
  tenantId    String
  description String
  status      MaintenanceStatus

  createdAt DateTime  @default(now()) @db.Timestamptz()
  updatedAt DateTime? @db.Timestamptz()

  unit   Unit @relation(fields: [unitId], references: [id])
  tenant User @relation(fields: [tenantId], references: [id])
}

model Document {
  id         String       @id @default(cuid())
  unitId     String
  type       DocumentType
  uploadedBy String
  fileUrl    String

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  unit           Unit @relation(fields: [unitId], references: [id])
  uploadedByUser User @relation(fields: [uploadedBy], references: [id])
}

model Notification {
  id      String           @id @default(cuid())
  userId  String
  message String
  type    NotificationType
  isRead  Boolean          @default(false)

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  user User @relation(fields: [userId], references: [id])
}
